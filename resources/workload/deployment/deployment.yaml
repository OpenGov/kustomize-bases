---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: UNDEFINED
  # Namespaces Guide: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  namespace: UNDEFINED
  # Annotations Guide: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  annotations: {}
    # Annotate for clear ownership over the resources within your organization.
    # opengov.com/team: UNDEFINED
    # opengov.com/environment: UNDEFINED
    # opengov.com/customer: UNDEFINED
    # opengov.com/service: UNDEFINED
    # opengov.com/suite: UNDEFINED
    # opengov.com/department: UNDEFINED
    # opengov.com/criticality: UNDEFINED
    # opengov.com/data-sensitivity: UNDEFINED

    # Annotating Kubernetes Services for Humans
    # https://ambassadorlabs.github.io/k8s-for-humans/
    # a8r.io/description: Unstructured text description of the service for humans.
    # a8r.io/owner: GitHub or equivalent username, email address, or unstructured owner description.
    # a8r.io/chat: Slack channel, or link to other external chat system.
    # a8r.io/bugs: Link to external bug tracker.
    # a8r.io/logs: Link to external log viewer.
    # a8r.io/documentation: Link to external project documentation.
    # a8r.io/repository: Link to external VCS repository.
    # a8r.io/support: Link to external support center.
    # a8r.io/runbook: Link to external project runbook.
    # a8r.io/incidents: Link to external incident dashboard.
    # a8r.io/uptime: Link to external uptime dashboard.
    # a8r.io/performance: Link to external performance dashboard.
    # a8r.io/dependencies: Unstructured text description of the service dependencies for humans.
  # Labels Guide: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  labels:
    # Common k8s Labels that should be defined in all resources
    # k8s Reference: https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    app.kubernetes.io/name: UNDEFINED
    app.kubernetes.io/instance: UNDEFINED
    app.kubernetes.io/version: UNDEFINED
    app.kubernetes.io/component: UNDEFINED
    app.kubernetes.io/part-of: UNDEFINED
    app.kubernetes.io/managed-by: UNDEFINED
spec:
  selector:
    matchLabels:
      # Common k8s Labels that should be defined in all resources
      # k8s Reference: https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
      app.kubernetes.io/name: UNDEFINED
      app.kubernetes.io/instance: UNDEFINED
      app.kubernetes.io/version: UNDEFINED
      app.kubernetes.io/component: UNDEFINED
      app.kubernetes.io/part-of: UNDEFINED
      app.kubernetes.io/managed-by: UNDEFINED
  template:
    metadata:
      labels:
        # Common k8s Labels that should be defined in all resources
        # k8s Reference: https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
        app.kubernetes.io/name: UNDEFINED
        app.kubernetes.io/instance: UNDEFINED
        app.kubernetes.io/version: UNDEFINED
        app.kubernetes.io/component: UNDEFINED
        app.kubernetes.io/part-of: UNDEFINED
        app.kubernetes.io/managed-by: UNDEFINED
    spec:
      # Service account ‘automountServiceAccountToken’ should be set to ‘false’
      # unless the workload needs to communicate via a ServiceAccount
      # Checkov Guide: https://docs.bridgecrew.io/docs/bc_k8s_35
      # k8s Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server
      automountServiceAccountToken: false
      # Ensure that the seccomp profile is set to docker/default or runtime/default
      # Checkov Guide: https://docs.bridgecrew.io/docs/bc_k8s_29
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: UNDEFINED
        image: UNDEFINED@sha256:abcd1234
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 5
        networkPolicy:
          ports:
          - port: 8080
            protocol: TCP
        resources:
          limits:
            # CPU limits should be set
            # Checkov Guide: https://docs.bridgecrew.io/docs/bc_k8s_10
            cpu: 100m
            # Memory limits should be set
            # Checkov Guide: https://docs.bridgecrew.io/docs/bc_k8s_12
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          # Containers should not run with allowPrivilegeEscalation
          # Checkov Guide: https://docs.bridgecrew.io/docs/bc_k8s_19
          allowPrivilegeEscalation: false
          # Minimize the admission of containers with capabilities assigned
          # Checkov Guide: https://docs.bridgecrew.io/docs/bc_k8s_34
          capabilities:
            drop:
            - ALL
          # Use read-only filesystem for containers where possible
          # Checkov Guide: https://docs.bridgecrew.io/docs/bc_k8s_21
          readOnlyRootFilesystem: true
          # Minimize the admission of root containers
          # Checkov Guide: https://docs.bridgecrew.io/docs/bc_k8s_22
          runAsNonRoot: true
          # Containers should run as a high UID to avoid host conflict
          # Checkov Guide: https://docs.bridgecrew.io/docs/bc_k8s_37
          runAsUser: 10001
          runAsGroup: 10001
    terminationGracePeriodSeconds: 30
